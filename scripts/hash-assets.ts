import * as fs from "fs";
import * as path from "path";
import * as crypto from "crypto";
import pkg from "glob";
const { sync } = pkg;
import { fileURLToPath } from "url";

const _filename = fileURLToPath(import.meta.url);
// Input directories
const dataBase = path.resolve(
  path.dirname(_filename),
  "../projects/word-weaver/src/assets/data/"
);
const dataGlob = path.resolve(path.dirname(dataBase), "**/*.json.gz");
const i18nBase = path.resolve(
  path.dirname(_filename),
  "../projects/word-weaver/src/assets/i18n/"
);
const i18nGlob = path.resolve(path.dirname(i18nBase), "i18n/*.json");
const manifestOutputPath = path.resolve(
  path.dirname(_filename),
  "../projects/word-weaver/src/app/data-manifest.ts"
);

// Helper to delete hashed JSON files (adjust pattern if needed)
const cleanHashedFiles = (baseDir: string, gzip = true) => {
  // Example pattern for hashed json files like: *.json.<hash>.json
  let hashedFiles;
  if (gzip) {
    hashedFiles = sync(path.join(baseDir, "**", "*.*.json.gz"));
  } else {
    hashedFiles = sync(path.join(baseDir, "*.*.json"));
  }
  for (const file of hashedFiles) {
    fs.unlinkSync(file);
    console.log(`Deleted old hashed file: ${file}`);
  }
};

// Clean hashed files before generating manifest
cleanHashedFiles(dataBase);
cleanHashedFiles(i18nBase, false);

// Get all matching files
const files = sync(dataGlob).concat(sync(i18nGlob));

const manifest: Record<string, string> = {};

const writePath = (fullPath, gzip) => {
  const contents = fs.readFileSync(fullPath);
  const hash = crypto
    .createHash("md5")
    .update(contents)
    .digest("hex")
    .slice(0, 8);

  const dir = path.dirname(fullPath);
  let file;
  let hashedFile;
  if (gzip) {
    file = path.basename(fullPath, ".json.gz");
    hashedFile = `${file}.${hash}.json.gz`;
  } else {
    file = path.basename(fullPath, ".json");
    hashedFile = `${file}.${hash}.json`;
  }

  const hashedPath = path.join(dir, hashedFile);
  console.log(hashedPath);
  // Write hashed copy
  fs.writeFileSync(hashedPath, contents);

  // Generate manifest key based on relative path (without extension)
  const relPath = path.relative(
    path.resolve(path.dirname(_filename), "../src/assets"),
    fullPath
  );
  let manifestKey;
  if (gzip) {
    manifestKey = path.basename(relPath.replace(/\.json.gz$/, ""));
  } else {
    manifestKey = path.basename(relPath.replace(/\.json$/, ""));
  }
  const manifestValue = path.basename(hashedPath);

  manifest[manifestKey] = manifestValue;

  console.log(`✔ ${relPath} → ${manifestValue}`);
};

sync(dataGlob).forEach((file) => writePath(file, true));
sync(i18nGlob).forEach((file) => writePath(file, false));
// Write TypeScript manifest file
const tsContent = `// Auto-generated by scripts/hash-json.ts
export const DATA_MANIFEST = ${JSON.stringify(manifest, null, 2)} as const;
`;

fs.writeFileSync(manifestOutputPath, tsContent);
console.log(`✅ Manifest written to ${manifestOutputPath}`);
